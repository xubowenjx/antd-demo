{"version":3,"sources":["views/world/index.js","views/hellow/index.js","views/child/index.js","views/login/index.js","components/Layout.js","router.js","views/app/App.js","serviceWorker.js","index.js"],"names":["World","react_default","a","createElement","Component","Hello","Child","Login","React","SubMenu","es_menu","Header","ItemGroup","Content","Footer","router","link","component","text","name","meta","auth","Layouter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedKeys","breadcrumbs","menu","item","props","breadcrumb","key","indexOf","console","log","setState","concat","toConsumableArray","url","location","pathname","idx","routes","r","layout","style","position","zIndex","width","className","theme","mode","defaultSelectedKeys","onSelect","selectMenu","bind","lineHeight","map","el","index","submenu","title","icon","type","ele","Item","data-component","data-breadcrumb","NavLink","to","exact","padding","marginTop","es_breadcrumb","margin","background","minHeight","Switch","Route","path","textAlign","children","App","value","alert","HashRouter","render","assign","Boolean","window","hostname","match","ReactDOM","views_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcdb05d1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass World extends Component {\n  render() {\n    return <div>world</div>;\n  }\n}\nexport default World;\n","import React, { Component } from \"react\";\nclass Hello extends Component {\n  render() {\n    return <div>hello world</div>;\n  }\n}\nexport default Hello;\n","import React, { Component } from 'react';\nclass Child extends Component {\n  render() {\n    return <div>child</div>;\n  }\n}\nexport default Child;\n","import React from \"react\";\nclass Login extends React.Component {\n  render() {\n    return <div>Login</div>;\n  }\n}\nexport default Login;\n","import React from 'react';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport { Route, Switch, NavLink } from 'react-router-dom';\nimport './style.css';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\nconst { Header, Content, Footer } = Layout;\nclass Layouter extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedKeys: [],\n      breadcrumbs: [],\n    };\n  }\n  selectMenu(menu) {\n    let link = menu.item.props['data-component'];\n    let breadcrumb = menu.item.props['data-breadcrumb'];\n    if (link) {\n      let key = menu.key;\n      let idx = key.indexOf(':');\n      //key = idx > -1 ? key.substring(0, idx) : key;\n      console.log(menu, key);\n      this.setState({\n        selectedKeys: [key],\n        breadcrumbs: ['Home', ...breadcrumb],\n      });\n    }\n  }\n  componentWillMount() {\n    let url = this.props.location.pathname;\n    for (let idx in this.props.routes) {\n      let r = this.props.routes[idx];\n      if (r.link === url) {\n        this.setState({\n          selectedKeys: [r.name],\n          breadcrumbs: ['Home', r.name],\n        });\n\n        break;\n      }\n    }\n  }\n  render() {\n    return (\n      <Layout>\n        <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n          <div className='logo' />\n          <Menu\n            theme='dark'\n            mode='horizontal'\n            defaultSelectedKeys={['2']}\n            selectedKeys={this.state.selectedKeys}\n            onSelect={this.selectMenu.bind(this)}\n            style={{ lineHeight: '64px' }}\n          >\n            {this.props.routes.map((el, index) => {\n              return !el.submenu ? (\n                <Menu.Item\n                  key={el.name}\n                  data-component={!!el.link}\n                  data-breadcrumb={[el.text]}\n                >\n                  {el.link ? (\n                    <NavLink to={el.link} exact>\n                      {el.icon && <Icon type={el.icon} />}\n                      {el.text}\n                    </NavLink>\n                  ) : (\n                    <span>\n                      {el.icon && <Icon type={el.icon} />}\n                      {el.text}\n                    </span>\n                  )}\n                </Menu.Item>\n              ) : (\n                <SubMenu\n                  title={\n                    <span className='submenu-title-wrapper'>\n                      <Icon type='setting' />\n                      {el.text}\n                    </span>\n                  }\n                  key={el.name}\n                >\n                  {el.submenu.map(ele => {\n                    return (\n                      <Menu.Item\n                        key={ele.name}\n                        data-component={true}\n                        data-breadcrumb={[el.text, ele.text]}\n                      >\n                        <NavLink to={ele.link} exact>\n                          {ele.icon && <Icon type={ele.icon} />}\n                          {ele.text}\n                        </NavLink>\n                      </Menu.Item>\n                    );\n                  })}\n                </SubMenu>\n              );\n            })}\n          </Menu>\n        </Header>\n        <Content style={{ padding: '0 50px', marginTop: 64 }}>\n          <Breadcrumb style={{ margin: '16px 0' }}>\n            {this.state.breadcrumbs.map(el => {\n              return <Breadcrumb.Item key={el}>{el}</Breadcrumb.Item>;\n            })}\n          </Breadcrumb>\n          <div style={{ background: '#fff', padding: 24, minHeight: 500 }}>\n            <Switch>\n              {this.props.routes.map((el, index) => {\n                return (\n                  el.component && (\n                    <Route\n                      key={index}\n                      path={el.link}\n                      component={el.component}\n                      // render={(props) => (<el.component {...props}/>)}\n                    />\n                  )\n                );\n              })}\n            </Switch>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>\n          Ant Design Â©2018 Created by Ant UED\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default Layouter;\n","import World from './views/world/index';\nimport Hello from './views/hellow/index';\nimport Child from './views/child/index';\nimport Login from './views/login/index';\nimport Desktop from './components/Layout';\nconst router = [\n  {\n    link: '/login',\n    component: Login,\n    text: 'login',\n    name: 'login',\n    meta: {\n      auth: false,\n    },\n  },\n  {\n    link: '/',\n    component: Desktop,\n    text: 'Desktop',\n    meta: {\n      auth: false,\n    },\n    children: [\n      {\n        link: '/world',\n        component: World,\n        text: 'World',\n        name: 'world',\n        meta: {\n          auth: true,\n        },\n      },\n      {\n        link: '/hellow',\n        component: Hello,\n        text: 'Hellow',\n        name: 'hellow',\n        icon: 'tag',\n        meta: {\n          auth: true,\n        },\n      },\n      {\n        text: 'submenus',\n        name: 'submenus',\n        icon: 'tag',\n        meta: {\n          auth: true,\n        },\n        submenu: [\n          {\n            link: '/child',\n            component: Child,\n            text: 'child',\n            name: 'submenus:1',\n            icon: 'tag',\n          },\n        ],\n      },\n    ],\n  },\n];\nexport default router;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport routes from \"../../router\";\n\nclass App extends Component {\n  clickMe(value) {\n    alert(value);\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          {routes.map((el, index) => {\n            return (\n              <Route\n                key={index}\n                path={el.link}\n                render={props => (\n                  <el.component routes={el.children} {...props} />\n                )}\n              />\n            );\n          })}\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/app/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}